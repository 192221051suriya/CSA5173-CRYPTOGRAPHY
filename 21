#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>

#define BLOCK_SIZE 16 // Block size in bytes

void pad_plaintext(uint8_t *plaintext, int *len) {
    int padding = BLOCK_SIZE - (*len % BLOCK_SIZE);
    for (int i = 0; i < padding; i++) {
        plaintext[*len + i] = (i == 0) ? 0x80 : 0x00; // 0x80 represents the `1` bit
    }
    *len += padding;
}

void encrypt_block(uint8_t *block, uint8_t *key, uint8_t *output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = block[i] ^ key[i]; // Simple XOR for demo
    }
}

void ECB_mode(uint8_t *plaintext, int len, uint8_t *key) {
    printf("ECB Mode:\n");
    uint8_t ciphertext[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        encrypt_block(plaintext + i, key, ciphertext);
        for (int j = 0; j < BLOCK_SIZE; j++) {
            printf("%02X ", ciphertext[j]);
        }
        printf("\n");
    }
}

void CBC_mode(uint8_t *plaintext, int len, uint8_t *key, uint8_t *iv) {
    printf("CBC Mode:\n");
    uint8_t ciphertext[BLOCK_SIZE];
    uint8_t previous_block[BLOCK_SIZE];
    memcpy(previous_block, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += BLOCK_SIZE) {
        uint8_t xored_block[BLOCK_SIZE];
        for (int j = 0; j < BLOCK_SIZE; j++) {
            xored_block[j] = plaintext[i + j] ^ previous_block[j];
        }
        encrypt_block(xored_block, key, ciphertext);
        memcpy(previous_block, ciphertext, BLOCK_SIZE);
        for (int j = 0; j < BLOCK_SIZE; j++) {
            printf("%02X ", ciphertext[j]);
        }
        printf("\n");
    }
}

void CFB_mode(uint8_t *plaintext, int len, uint8_t *key, uint8_t *iv) {
    printf("CFB Mode:\n");
    uint8_t feedback[BLOCK_SIZE];
    uint8_t ciphertext[BLOCK_SIZE];
    memcpy(feedback, iv, BLOCK_SIZE);

    for (int i = 0; i < len; i += BLOCK_SIZE) {
        uint8_t encrypted_feedback[BLOCK_SIZE];
        encrypt_block(feedback, key, encrypted_feedback);
        for (int j = 0; j < BLOCK_SIZE; j++) {
            ciphertext[j] = plaintext[i + j] ^ encrypted_feedback[j];
            feedback[j] = ciphertext[j];
        }
        for (int j = 0; j < BLOCK_SIZE; j++) {
            printf("%02X ", ciphertext[j]);
        }
        printf("\n");
    }
}

int main() {
    uint8_t key[BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
                               0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
    uint8_t iv[BLOCK_SIZE] = {0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88,
                              0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00};

    uint8_t plaintext[64] = "This is a test message for ECB, CBC, and CFB.";
    int len = strlen((char *)plaintext);

    printf("Original Plaintext: %s\n", plaintext);

    pad_plaintext(plaintext, &len);
    printf("Padded Plaintext:\n");
    for (int i = 0; i < len; i++) {
        printf("%02X ", plaintext[i]);
    }
    printf("\n\n");

    ECB_mode(plaintext, len, key);
    printf("\n");
    CBC_mode(plaintext, len, key, iv);
    printf("\n");
    CFB_mode(plaintext, len, key, iv);

    return 0;
}
